{"meta":{"title":"Wency","subtitle":null,"description":"心若无恙, 奈我何其","author":"Wyx_wx","url":"https://wyxwx.github.io"},"pages":[{"title":"","date":"2018-11-08T17:03:31.805Z","updated":"2018-11-08T17:03:31.688Z","comments":true,"path":"404.html","permalink":"https://wyxwx.github.io/404.html","excerpt":"","text":""},{"title":"404","date":"2018-11-06T14:28:28.000Z","updated":"2018-11-07T14:31:59.690Z","comments":true,"path":"404/index.html","permalink":"https://wyxwx.github.io/404/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-11-06T15:18:06.000Z","updated":"2018-11-08T17:23:41.923Z","comments":true,"path":"about/index.html","permalink":"https://wyxwx.github.io/about/index.html","excerpt":"","text":"这里大三在校生一枚 目前专攻于 Java 后台 对于算法略有涉猎 文章从本人 CSDN 陆续搬运中 了解详情请致邮 791989352@qq.com"},{"title":"分类","date":"2018-11-07T13:44:14.000Z","updated":"2018-11-07T15:02:15.540Z","comments":true,"path":"categories/index.html","permalink":"https://wyxwx.github.io/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2018-11-06T14:27:59.000Z","updated":"2018-11-07T14:31:37.535Z","comments":true,"path":"search/index.html","permalink":"https://wyxwx.github.io/search/index.html","excerpt":"","text":""},{"title":"search","date":"2018-11-06T14:27:59.000Z","updated":"2018-11-06T15:06:41.490Z","comments":true,"path":"tag/index.html","permalink":"https://wyxwx.github.io/tag/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-08T16:54:32.000Z","updated":"2018-11-08T16:54:58.926Z","comments":true,"path":"tags/index.html","permalink":"https://wyxwx.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux 的文件权限的概念","slug":"Linux-的文件权限的概念","date":"2018-11-10T05:42:40.000Z","updated":"2018-11-10T05:55:18.725Z","comments":true,"path":"2018/11/10/Linux-的文件权限的概念/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/Linux-的文件权限的概念/","excerpt":"##Linux 文件属性 利用 ls -al 命令查看文件 命令 ls：显示文件的文件名与相关属性 -al 参数：列出所有的文件（含隐藏文件）详细的权限与属性","text":"##Linux 文件属性 利用 ls -al 命令查看文件 命令 ls：显示文件的文件名与相关属性 -al 参数：列出所有的文件（含隐藏文件）详细的权限与属性 -rw-r–r–. 1 root root 129 Dec 29 2013 .tcshrc 权限 连接数 文件所有者 文件所属用户组 文件大小 文件最后被修改的时间 文件名 第一列代表这个文件的类型与权限 · 第一个字符代表这个文件是“目录、文件或链接文件等” 权限：rwx。[r] 代表可读，[w] 代表可写，[x] 表示可执行(execute)，三个权限的位置不会改变 共三组权限 第一组：文件所有者的权限 第二组：同用户组的权限 第三组：其他非本用户组的权限 ps：目录与文件的权限意义并不相同 –&gt; 第二列表示有多少文件名连接到此节点 –&gt; 第三列表示这个文件（或目录）的所有者账号 –&gt; 第四列表示这个文件的所属用户组 –&gt; 第五列为这个文件的容量大小，默认单位为 B –&gt; 第六列为这个文件的创建日期或最近的修改日期 –&gt; 第七列为该文件名 ##改变文件属性与权限 chgrp: 改变文件所属用户组 · chown: 改变文件所有者 · chmod: 改变文件的权限 –&gt; 改变所属用户组：chgrp 前提：要被改变的组名必须在 /etc/group 文件内存在 12[root@www ~]# chgrp [-R] dirname/filename ...# -R : 进行递归的持续更改，即连同子目录下的所有文件、目录都更新成为这个用户组 改变文件所有者：chown（也可以修改用户组的名称） 前提：用户必须是已经存在与系统中的账号，也就是在 /etc/password 这个文件中有记录的用户名称 123[root@www ~]# chown [-R] 账号名称 文件或目录[root@www ~]# chown [-R] 账号名称:组名 文件或目录# -R : 进行递归的持续更改，即连同子目录下的所有文件、目录都更新成为这个用户组 chown 也可以使用 “chown user.group file”，即在所有者与用户组之间加上小数点 “.” 单纯修改所属用户组：”chown .group file” 改变权限：chmod 权限的设置方法有两种： 数字类型改变文件权限 符号类型改变文件权限 · 数字类型： r：4 w：2 x：1 12[root@www ~]# chmod [-R] xyz 文件或目录# xyz：rwx 属性数值的相加 · 符号类型： user：u group：g others：o all：a +’：加入 ‘-’：除去 ‘=’：设置 ##目录与文件的权限意义 文件是存放实际数据的所在，目录主要的内容是记录文件名列表 文件的权限： r：可读取此文件的实际内容 w：可以编辑，新增或者是修改该文件的内容（不包含删除） x：该文件具有可以被系统执行的权限 目录的权限： r：具有读取目录结构列表的权限，查询该目录下的文件名 w：具有更改该目录结构列表的权限，即： 1. 新建文件与目录 2. 删除已经存在的文件与目录 3. 将已存在的文件或目录进行重命名 4. 转移该目录内的文件、目录位置 x：代表用户能否进入该目录成为工作目录 工作目录：当前所在的目录 能不能进入（cd）某一个目录，只与该目录的 x 权限有关 要开放目录给任何人浏览时，应该至少也要给予 r 及 x 的权限","categories":[{"name":"Linux 学习之路","slug":"Linux-学习之路","permalink":"https://wyxwx.github.io/categories/Linux-学习之路/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wyxwx.github.io/tags/Linux/"}]},{"title":"关于 Linux 系统下的关机命令","slug":"关于-Linux-系统下的关机命令","date":"2018-11-10T05:39:31.000Z","updated":"2018-11-10T05:40:51.592Z","comments":true,"path":"2018/11/10/关于-Linux-系统下的关机命令/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/关于-Linux-系统下的关机命令/","excerpt":"","text":"由于 Linux 系统的特殊性，可能有很多人同时在你的主机上面工作，所以当你直接按下电源开关来关机时，其他人的数据传输也会中断，造成文件损毁，所以关于这个问题，Linux 里有一些相关的命令 将数据同步写入磁盘：sync 在 Linux 系统的默认情况下，某些已经加载内存中的数据不会直接被写回硬盘，而是先暂存在内存当中。 因此在关机之前要利用 sync 命令先将数据写入磁盘，为了防止非正常关机，可以在关机或重启之前指定多次该命令。 ps：目前的 shutdown / reboot / halt 等命令均已经在关机前进行了 sync 这个工具的调用 惯用的关机命令：shutdown shutdown 可以完成以下工作： · 自由选择关机模式：关机、重启或进入单用户操作模式 · 设置关机时间： · 自定义关机消息 · 仅发出警告信息（不关机） · 选择是否要用 fsck 检查文件系统： （fsck命令被用于检查并且试图修复文件系统中的错误。当文件系统发生错误四化，可用fsck指令尝试加以修复。） shutdown 语法规则： /sbin/shutdown [-t 秒] [-arkhncff] 时间 [警告信息] eg：1/sbin/shutdown -h 10 'I will shutdown after 10 mins' 这台机器会在十分钟之后关机，并且将字符串显示在目前登录者的屏幕前方其他命令： 重启、关机：reboot、halt，poweroff 补充： Linux 系统中的系统运作的模式（run level）共有七种，以下先列出四种执行等级： run level 0: 关机 run level 3: 纯命令行模式 run level 5: 含有图形界面模式 run level 6: 重启 切换执行等级：init 命令 所以如下的命令也可以用于关机： 1init 0","categories":[{"name":"Linux 学习之路","slug":"Linux-学习之路","permalink":"https://wyxwx.github.io/categories/Linux-学习之路/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wyxwx.github.io/tags/Linux/"}]},{"title":"关于 Linux 的 man page 说明与使用","slug":"关于-Linux-的-man-page-说明与使用","date":"2018-11-10T05:23:34.000Z","updated":"2018-11-10T05:37:41.237Z","comments":true,"path":"2018/11/10/关于-Linux-的-man-page-说明与使用/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/关于-Linux-的-man-page-说明与使用/","excerpt":"man 即是 manual 的简写 在命令行执行 “man [命令或数据]” 既可以出现关于该命令或数据的详细操作说明","text":"man 即是 manual 的简写 在命令行执行 “man [命令或数据]” 既可以出现关于该命令或数据的详细操作说明 例如，输入 “man cal” 之后会出现如下界面: 下表为在 man page 界面中的常用快捷键 按键 功能 空格 向下翻一页 [Page Down] 向下翻一页 [Page Up] 向上翻一页 [Home] 去到第一页 [End] 去到最后一页 /string 向下查询string字符串 ?string 向上查询string字符串 n, N 利用 / 或 ? 来查询字符串时，可以用 n 来继续下一个查询，用 N 来进行反向查询 q 结束 man page 环境 man page 页面第一行的 CAL(1) 中， 在查询数据的后面的数字 (1) 是有其说明意义的，下表为常见数字的意义 数字代号 代表内容 1 用户在 shell 环境中可以操作的命令或可执行文件 2 系统内核可调用的函数与工具等 3 一些常用的函数与函数库，大部分为 C 的函数库 4 设备文件的说明，通常在 /dev 下的文件 5 配置文件或者是某些文件的格式 6 游戏 7 惯例与协议等，例如 Linux 文件系统、网络协议、ASCII code 等说明 8 系统管理员可用的管理命令 9 跟 Kernel 有关的文件 man page 中的内容也分几个部分 代号 内容说明 NAME 简短的命令，数据名称说明 SYNOPSIS 简短的命令执行语法简介 DESCRIPTION 较为完整的说明 OPTIONS 针对 SYNOPSIS 部分中，有列举的所有可用的选项说明 COMMANDS 当这个程序在执行的时候，可以在此程序中执行的命令 FILES 这个程序或数据所使用或参考或连接到的某些文件 SEE ALSO 这个命令或数据有相关的其他说明 EXAMPLE 一些可以参考的范例 BUGS 是否有相关的错误 建议查询 man page 时的步骤： 先查看 NAME 的项目 仔细看一下 DESCRIPTION， 学习一些细节 查询关于 OPTIONS 的部分，了解每个选项的意义 查看 SEE ALSO 来看一下还有那些东西可以使用 查看 FILES 部分的文件来参考 查询特定命令/文件的 man page 说明文件： man -f [命令或数据]： 获取 [命令或数据] 的信息 man -k [命令或数据]： 在系统的说明文件中，只要有 [命令或数据] 这个关键字就将该说明列出来 下图执行: “man -k cal” · 补充：whatis [命令或数据] 等价于 man -f [命令或数据] apropos [命令或数据] 等价于 man -k [命令或数据] 若想要使用这两个命令，需要以 root 身份创建 whatis 数据库: [root@www ~] # makewhatis 总结自 《鸟哥的 Linux 私房菜》 基础学习篇第三版","categories":[{"name":"Linux 学习之路","slug":"Linux-学习之路","permalink":"https://wyxwx.github.io/categories/Linux-学习之路/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wyxwx.github.io/tags/Linux/"},{"name":"man page","slug":"man-page","permalink":"https://wyxwx.github.io/tags/man-page/"}]},{"title":"Vmware Workstation 虚拟机出现 The VMware Authorization Service is not running 问题的解决方案","slug":"Vmware-Workstation-虚拟机出现-The-VMware-Authorization-Service-is-not-running-问题的解决方案","date":"2018-11-10T05:18:08.000Z","updated":"2018-11-10T05:20:16.991Z","comments":true,"path":"2018/11/10/Vmware-Workstation-虚拟机出现-The-VMware-Authorization-Service-is-not-running-问题的解决方案/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/Vmware-Workstation-虚拟机出现-The-VMware-Authorization-Service-is-not-running-问题的解决方案/","excerpt":"点击开启虚拟机后，出现了如图所示的错误提示","text":"点击开启虚拟机后，出现了如图所示的错误提示 解决方案： 打开任务管理器，点击服务 在名称里找到 VMAuthdService 右键点击选择启动 再次开启虚拟机即可成功","categories":[{"name":"踩坑之路","slug":"踩坑之路","permalink":"https://wyxwx.github.io/categories/踩坑之路/"}],"tags":[{"name":"VM 虚拟机","slug":"VM-虚拟机","permalink":"https://wyxwx.github.io/tags/VM-虚拟机/"}]},{"title":"阿里云Ubuntu64位云服务器搭建JavaEE环境（JDK+Tomcat+Mysql）","slug":"阿里云Ubuntu64位云服务器搭建JavaEE环境（JDK-Tomcat-Mysql）","date":"2018-11-10T04:49:08.000Z","updated":"2018-11-10T05:13:29.447Z","comments":true,"path":"2018/11/10/阿里云Ubuntu64位云服务器搭建JavaEE环境（JDK-Tomcat-Mysql）/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/阿里云Ubuntu64位云服务器搭建JavaEE环境（JDK-Tomcat-Mysql）/","excerpt":"要想在服务器上部署自己的项目，首先要在服务器上安装JDK， Mysql， Tomcat，下面将先讲解如何安装这三项。由于我的电脑是win10系统，所以需要下载额外的辅助软件来实现与服务器的文件交互等。","text":"要想在服务器上部署自己的项目，首先要在服务器上安装JDK， Mysql， Tomcat，下面将先讲解如何安装这三项。由于我的电脑是win10系统，所以需要下载额外的辅助软件来实现与服务器的文件交互等。 准备工作：下载PuTTy，FileZilla，jdk（请无视截图的版本，不要下载10.0版本！！！来自踩坑选手的忠告），Tomcat，mysql 打开FileZilla，将云服务器的公有IP（若是腾讯云服务器，只需要将唯一IP填入即可）填入主机栏，其他信息填好之后点击快速连接 在左侧的本地站点中找到刚刚下载的jdk及Tomcat压缩包，选中后右键点击上传 上传成功后，打开PuTTy以连接到服务器，将云服务器的公有IP填入HostName栏，Port填写22（出于安全考虑，Linux默认只开放22端口，若需要连接其他端口，可以在控制台中进行设置） 点击open后跳转到如下图所示界面，输入用户名及密码后登录成功（Linux系统不会显示密码，输好密码后直接回车即可） 查看当前目录下的文件，即我们刚刚用FileFilla上传成功的压缩包 在root目录下新建一个javaee文件夹输入命令： 1tar zxvf jdk-10.0.2_linux-x64_bin.tar.gz -C javaee 从而将jdk压缩包解压至javaee目录下 注：想要给文件重命名一定要在进行配置之前改！！！ 本弱鸡在配置之后对文件进行了重命名，并且忘了改配置文件，卡了一个小时，生无可恋心态已崩 输入命令： 1vi /etc/profile 进入配置文件开始配置java环境变量 进入下图界面后，按下键盘上的’i’进行编辑，并在文件的最后追加如下配置，输入完成后按下Esc键，再输入“:wq!”保存文件并退出（具体参照Linux中VI编辑器的使用） 1234export JAVA_HOME=/root/javaee/jdk-10.0.2export JRE_HOME=/root/javaee/jdk-10.0.2/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PATH 输入两条命令，若出现下图所示提示则配置成功 12source /etc/profilejava -version 接下来进行Tomcat的安装配置将其解压至javaee文件夹下 进入Tomcat文件夹下，用 VI 编辑器打开 catalina.sh 1vi catalina.sh 在该文件的开头添加如下配置 12export JAVA_HOME=/root/javaee/jdk-10.0.2export JRE_HOME=/root/javaee/jdk-10.0.2/jre 退出后在Tomcat的bin目录下如下输入命令，显示Tomcat已成功启动 1./startup.sh 此时，从浏览器可以成功访问Tomcat页面（访问之前请确认是否打开防火墙或已按照文章最后附一的内容将8080端口添加进安全组） 接下来开始安装mysql由于mysql版本及原Linux系统存在残留mysql的问题，搞了一下午心态已崩，重新装了镜像，用了大佬们常用的更简便的方法在终端窗口中输入以下三条命令 123sudo apt-get install mysql-serversudo apt-get install mysql-clientsudo apt-get install libmysqlclient-dev 安装完成后，测试是否安装成功，输入登录指令及密码，密码即安装 mysql-server 时设置的密码，若出现下图所示情况，则安装成功，此时，可以查看与操作数据库中的数据表 至此，jdk， tomcat， mysql 全部安装成功 附一：开放其他可用端口：云服务器管理控制台-&gt;管理-&gt;本实例安全组-&gt;配置规则-&gt;添加安全组规则之后添加所需要访问的端口即可 下面是一些常用端口","categories":[{"name":"常用配置","slug":"常用配置","permalink":"https://wyxwx.github.io/categories/常用配置/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wyxwx.github.io/tags/Linux/"},{"name":"云服务器","slug":"云服务器","permalink":"https://wyxwx.github.io/tags/云服务器/"},{"name":"JavaEE环境","slug":"JavaEE环境","permalink":"https://wyxwx.github.io/tags/JavaEE环境/"}]},{"title":"Win10环境配置Tomcat（9.0版本）","slug":"Win10环境配置Tomcat（9-0版本）","date":"2018-11-10T03:11:57.000Z","updated":"2018-11-10T03:19:05.976Z","comments":true,"path":"2018/11/10/Win10环境配置Tomcat（9-0版本）/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/Win10环境配置Tomcat（9-0版本）/","excerpt":"由于博主今天中午脑子一抽重装了系统，电脑上所有的东西都被我干掉了，一朝回到解放前，被各种配置折磨了一下午，所以记录一下重装系统之后艰难的配置路线，以防以后再次冲动 首先去官网下载tomcat的压缩包并解压","text":"由于博主今天中午脑子一抽重装了系统，电脑上所有的东西都被我干掉了，一朝回到解放前，被各种配置折磨了一下午，所以记录一下重装系统之后艰难的配置路线，以防以后再次冲动 首先去官网下载tomcat的压缩包并解压 然后去电脑的属性配置环境变量 这里需要配置两处：CATALINA_HOME 与 Path CATALINA_HOME的变量值是tomcat的根目录，如下图 其后，点击编辑Path新增一条：%CATALINA_HOME%\\bin，随后一路确定 随后打开cmd，输入startup 此时会弹出另一个窗口 当出现如下图红框中日志时，打开浏览器，输入：http://localhost:8080/ 出现如下页面，则tomcat配置成功","categories":[{"name":"常用配置","slug":"常用配置","permalink":"https://wyxwx.github.io/categories/常用配置/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://wyxwx.github.io/tags/Tomcat/"}]},{"title":"关于vi编辑器的方向键无法使用的解决方法","slug":"关于vi编辑器的方向键无法使用的解决方法","date":"2018-11-10T03:05:40.000Z","updated":"2018-11-10T03:06:39.576Z","comments":true,"path":"2018/11/10/关于vi编辑器的方向键无法使用的解决方法/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/关于vi编辑器的方向键无法使用的解决方法/","excerpt":"对于刚开始用Linux编程的小白来说，vi是最基础的编辑器，可以用vi写出一些简单程序 而在vi中按下方向键或退格键会出现奇奇怪怪的字母","text":"对于刚开始用Linux编程的小白来说，vi是最基础的编辑器，可以用vi写出一些简单程序 而在vi中按下方向键或退格键会出现奇奇怪怪的字母 这种情况是由于vi不支持方向键和退格键，这些功能是由vim支持的，所以只需要重新下载vim即可 打开终端，依次输入以下命令: sudo apt-get remove vim-common sudo apt-get install vim 再次打开vi编辑器之后就可以正常使用方向键及退格键","categories":[{"name":"Linux 学习之路","slug":"Linux-学习之路","permalink":"https://wyxwx.github.io/categories/Linux-学习之路/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wyxwx.github.io/tags/Linux/"},{"name":"vi","slug":"vi","permalink":"https://wyxwx.github.io/tags/vi/"}]},{"title":"Spring Boot + WebSocket 学习笔记","slug":"学习笔记","date":"2018-11-10T02:44:46.000Z","updated":"2018-11-10T02:59:15.683Z","comments":true,"path":"2018/11/10/学习笔记/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/学习笔记/","excerpt":"WebSocket 协议是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信–允许服务器主动发送信息给客户端，实现客户端之间的交互。WebSocket 是从 Html5 中演化而出，但是相对于 HTTP的 不支持持久性连接，WebSocket 是一个持久化的协议。","text":"WebSocket 协议是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信–允许服务器主动发送信息给客户端，实现客户端之间的交互。WebSocket 是从 Html5 中演化而出，但是相对于 HTTP的 不支持持久性连接，WebSocket 是一个持久化的协议。 实现 WebSocket 协议后，服务端只要与客户端进行过一次连接之后，就不需要再次连接，并且可以一直向客户端发送信息，即服务端主动向客户端发送消息。由于 WebSocket 协议在握手阶段采用了 HTTP 协议，能通过各种 HTTP 代理服务器。目前并不是所有的浏览器都实现了 WebSocket，对于没有实现该协议的浏览器，还需要通过 STOMP 协议来完成兼容。要想在 Spring Boot 项目中应用 WebSocket，首先要在 pom.xml 中加入依赖 12345678910111213 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; &lt;!-- Spring security 主要为了点对点时的安全登录，可以不使用 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; 下面开发一个简单的 WebSocket 服务· 创建 java 配置文件 1234567891011121314import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.socket.server.standard.ServerEndpointExporter; @Configurationpublic class WebSocketConfig &#123; //创建服务器端点 @Bean public ServerEndpointExporter serverEndpointExporter()&#123; return new ServerEndpointExporter(); &#125; &#125; · 定义 WebSocket 服务端站点 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106 import org.springframework.stereotype.Service; import javax.websocket.*;import javax.websocket.server.ServerEndpoint;import java.io.IOException;import java.util.concurrent.CopyOnWriteArrayList; //创建 WebSocket 服务站点， 参数: 请求地址@ServerEndpoint(\"/ws\")@Servicepublic class WebSocketServiceImpl &#123; //用来记录当前在线连接数，应该设置为线程安全 private static int onlineCount = 0; //保证线程安全的 WebSocketServiceImpl 对象的 Set private static CopyOnWriteArrayList&lt;WebSocketServiceImpl&gt; webSocketServices = new CopyOnWriteArrayList&lt;&gt;(); //与客户端的连接会话 private Session session; public Session getSession() &#123; return session; &#125; /** * 连接建立成功调用的方法 * @param session */ @OnOpen public void onOpen(Session session)&#123; this.session = session; webSocketServices.add(this); addOnlineCount(); System.out.println(\"有新连接加入， 当前在线人数: \" + getOnlineCount()); try &#123; sendMessage(\"有新连接加入了\"); &#125;catch (IOException e)&#123; e.printStackTrace(); &#125; &#125; /** * 连接关闭调用的方法 */ @OnClose public void onClose()&#123; webSocketServices.remove(this); subOnlineCount(); System.out.println(\"有一个连接关闭， 当前在线人数: \" + getOnlineCount()); &#125; /** * 收到客户端消息后调用的方法 * @param message 客户端发送来的消息 * @param session */ @OnMessage public void onMessage(String message, Session session)&#123; System.out.println(\"收到客户端消息: \" + message); //群发消息 for(WebSocketServiceImpl service : webSocketServices)&#123; try &#123; //获取当前用户名称 String userName = service.getSession().getUserPrincipal().getName(); System.out.println(userName); service.sendMessage(message); &#125;catch (IOException e)&#123; e.printStackTrace(); &#125; &#125; &#125; /** *发生错误时调用 */ @OnError public void onError(Session session, Throwable error)&#123; System.out.println(\"发生错误\"); error.printStackTrace(); &#125; /** * 发送消息 * @param message 客户端消息 * @throws IOException */ private void sendMessage(String message) throws IOException&#123; this.session.getBasicRemote().sendText(message); &#125; //返回在线数 private static synchronized int getOnlineCount()&#123; return onlineCount; &#125; //增加连接人数 private static synchronized void addOnlineCount()&#123; WebSocketServiceImpl.onlineCount++; &#125; //减少连接人数 private static synchronized void subOnlineCount()&#123; WebSocketServiceImpl.onlineCount--; &#125; &#125; · WebSocket 页面（websocket.jsp） 12345678910111213141516171819202122&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;My WebSocket&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"/jquery-1.8.3.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/websocket.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; 测试 WebSocket 站点 &lt;br&gt; &lt;input id = \"message\" type=\"text\"&gt; &lt;button onclick=\"sendMessage()\"&gt;发送消息&lt;/button&gt; &lt;button onclick=\"closeWebSocket()\"&gt;关闭 WebSocket 连接&lt;/button&gt; &lt;div id=\"context\"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; · WebSocket 客户端脚本(websocket.js) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051var websocket = null;//判断当前浏览器是否支持 WebSocketif('WebSocket' in window)&#123; //创建 WebSocket 对象，连接服务器端点 websocket = new WebSocket(\"ws://localhost:8080/ws\");&#125;else&#123; alert('Not support webSocket')&#125; //连接发生错误的回调方法websocket.onerror = function () &#123; appendMessage(\"error\");&#125;; //连接成功建立的回调方法websocket.onopen = function (event) &#123; appendMessage(\"open\");&#125;; //接收到消息的回调方法websocket.onmessage = function (event) &#123; appendMessage(event.data);&#125;; //连接关闭的回调方法websocket.onclose = function () &#123; appendMessage(\"close\");&#125;; //监听窗口关闭事件，当窗口关闭时，主动关闭 websocket 连接//防止连接还没断开就关闭窗口， server 端会抛异常window.onbeforeunload = function () &#123; websocket.close();&#125;; //将消息显示在网页上function appendMessage(message) &#123; var context = $(\"#context\").html() + \"&lt;br/&gt;\" + message; $(\"#context\").html(context);&#125;; //关闭连接function closeWebSocket() &#123; websocket.close();&#125; //发送消息function sendMessage() &#123; var message = $(\"#message\").val(); websocket.send(message);&#125; · WebSocket 控制器 123456789101112131415 import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController; @RequestMapping(value = \"/websocket\")@RestControllerpublic class WebSocketController &#123; @GetMapping(value = \"/index\") public String websocket()&#123; return \"websocket\"; &#125; &#125; 启动控制器，跳转去客户端，打开两个页面发送消息","categories":[{"name":"JavaEE 学习之路","slug":"JavaEE-学习之路","permalink":"https://wyxwx.github.io/categories/JavaEE-学习之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"}]},{"title":"Spring Boot 的 jsp文件中无法引入静态资源文件（js,css等文件）","slug":"jsp文件中无法引入静态资源文件（js-css等文件）","date":"2018-11-10T02:07:05.000Z","updated":"2018-11-10T02:45:27.185Z","comments":true,"path":"2018/11/10/jsp文件中无法引入静态资源文件（js-css等文件）/","link":"","permalink":"https://wyxwx.github.io/2018/11/10/jsp文件中无法引入静态资源文件（js-css等文件）/","excerpt":"错误（net::ERR_ABORTED 404）报错信息：","text":"错误（net::ERR_ABORTED 404）报错信息： 报错时我的jsp文件中引入路径： 12&lt;script type=\"text/javascript\" src=\"../../sources/static/jquery-1.8.3.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"../../sources/static/websocket.js\"&gt;&lt;/script&gt; 正确路径：删除掉static及其之前的全部路径 12&lt;script type=\"text/javascript\" src=\"/jquery-1.8.3.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"/websocket.js\"&gt;&lt;/script&gt; 原因：在未对 application.properties 文件进行配置时，Spring Boot 默认从resources目录的static目录查找资源文件，所以 src 目录中无需加入 static 及其之前的路径 若想对资源路径进行配置，可以在 application.properties 配置文件中加入下面的配置 1spring.mvc.static-path-pattern=/**","categories":[{"name":"JavaEE 学习之路","slug":"JavaEE-学习之路","permalink":"https://wyxwx.github.io/categories/JavaEE-学习之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"}]},{"title":"IDEA 创建 Maven + Spring Boot 项目并打包（jar 包）上传至 Linux 服务器上运行","slug":"IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行","date":"2018-11-07T16:58:32.000Z","updated":"2018-11-08T17:20:20.514Z","comments":true,"path":"2018/11/08/IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行/","link":"","permalink":"https://wyxwx.github.io/2018/11/08/IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行/","excerpt":"首先打开 IDEA 并点击 New Project，进入如下页面 点击 Maven，选中”Create from archetype” 选择 quickstart 然后 next","text":"首先打开 IDEA 并点击 New Project，进入如下页面 点击 Maven，选中”Create from archetype” 选择 quickstart 然后 next GroupId 为 package 名，ArtifactId 为项目名称，点击 next 不用改动，直接 next（有教程说要添加一个什么东西来防止下载速度过慢，笔者用了另一种办法，后面描述，所以这里不需要改动） 这个页面也不用改动，直接 finish 进入项目后，先去修改 pom.xml 文件，首先添加图中圈出的三处（version 请视自己具体所用版本而定） 接着在 dependencies 标签内添加以下配置 12345678910111213141516171819202122232425262728293031323334&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt; 然后将 build 标签改为下图所示 此时右下角可能会出现下图所示的小窗口，并且一直停滞，这就是上面所提到的问题，此时，下载 archetype-catalog.xml 文件，并将其放在 C 盘 .m2 文件的根目录下 关闭项目后再次打开发现下载速度明显提升并且很快结束下载 然后在 main 目录下创建文件夹 resources 并且设置为 Resources Root 在 Resources 目录下创建 application.properties 文件并填写有关数据库的配置（这里配置端口是因为笔者的服务器中8080端口已被占用，所以使用了另外的端口） 123456spring.datasource.url=jdbc:mysql://localhost:3306/basketball?serverTimezone=GMT&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsespring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.username=rootspring.datasource.password=root`# 设置 tomcat 端口为 8880server.port=8880 此时，正式开始代码部分 在 com.hello 包下创建 controller 包， 并在其下创建 HelloController 类 在其中编写代码 1234567891011121314package com.hello.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.Map;@RestControllerpublic class HelloController &#123; @GetMapping(value = \"/hello\") public Map&lt;String, Object&gt; hello()&#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"hello\", \"Hello world!\"); return map; &#125;&#125; 打开 App.java 为 App 添加注解 @SpringBootApplication，并在 Main 函数中运行 SpringApplication.run(App.class, args); 1234567891011package com.hello;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class App&#123; public static void main( String[] args ) &#123; SpringApplication.run(App.class, args); &#125;&#125; 此时，代码部分已经结束，开始进行下一步，按图中箭头所示进行操作 Name 可以自己取，Main class 选取添加了 @SpringBootApplication 注解的 App 类，直接 ok 运行后用 Postman（Get 方法也可以在浏览器地址栏直接访问） 访问 url，成功返回 接下来，将项目打包为 jar 包并上传至服务器 在 View 中的 Tool Windows 找到Maven Projects 并打开 先双击 clean （如果是第一次则不需要） 然后双击 install 此时，打包成功 在 target 目录下可以看到生成的 .jar 文件 然后利用 FileZilla 将 jar 包上传至服务器文件 利用 PuTTY 登录云服务器，进入到所上传 jar 包的目录下 运行 jar 包有两种方式 1234# 直接运行，当该窗口关闭时程序终止java -jar xxxx.jar# 持久运行，即便窗口关闭程序也不会终止nohup java -jar xxxx.jar &amp; 这里运用第二种方法 此时 hello.jar 已在运行，并且将日志存放在 nohup.out 文件中 12# 查看日志， Ctrl + C 退出查看tail -100f nohup.out 此时再次通过 Postman 访问路径，可以成功得到返回结果 若想关闭 jar 包的运行，首先要查看当前 jar 包的进程号，然后利用 kill 命令杀死进程 1234# 查看 xxxx.jar 运行的进程号ps -ef|grep xxxx.jar# 关闭进程号为 xx 的进程 kill xx","categories":[{"name":"JavaEE 学习之路","slug":"JavaEE-学习之路","permalink":"https://wyxwx.github.io/categories/JavaEE-学习之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"},{"name":"Maven","slug":"Maven","permalink":"https://wyxwx.github.io/tags/Maven/"},{"name":"Linux 云服务器","slug":"Linux-云服务器","permalink":"https://wyxwx.github.io/tags/Linux-云服务器/"}]},{"title":"Spring Boot 项目在本地可以成功访问但是在服务器上无法访问 Controller 方法解决办法","slug":"Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法","date":"2018-11-07T16:24:51.000Z","updated":"2018-11-08T17:19:29.029Z","comments":true,"path":"2018/11/08/Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法/","link":"","permalink":"https://wyxwx.github.io/2018/11/08/Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法/","excerpt":"这是一篇记录自己失了智的博客 晚上写了一个小 Demo 来测试在云服务器上同时运行两个 jar 包的情况 两个项目的端口分别为 8080 和 8880 以 8880 为端口的 Demo 在本地成功运行并且访问到了 Controller 中的方法","text":"这是一篇记录自己失了智的博客 晚上写了一个小 Demo 来测试在云服务器上同时运行两个 jar 包的情况 两个项目的端口分别为 8080 和 8880 以 8880 为端口的 Demo 在本地成功运行并且访问到了 Controller 中的方法 在服务器运行后从日志中也可以确定成功完成了映射 但是就是没有办法通过服务器的 url 进行访问 百度了 N 久都没有找到和我相同的问题，直到被大佬指点之后才意识到，我的服务器的安全组中没有添加 8880 这个端口，换言之，请求被防火墙拦截了。去将 8880 添加到安全组后，再次访问，成功返回 “Hello world!”","categories":[{"name":"踩坑之路","slug":"踩坑之路","permalink":"https://wyxwx.github.io/categories/踩坑之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"},{"name":"无法访问 Controller","slug":"无法访问-Controller","permalink":"https://wyxwx.github.io/tags/无法访问-Controller/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-06T13:38:41.928Z","updated":"2018-11-08T17:11:59.737Z","comments":true,"path":"2018/11/06/hello-world/","link":"","permalink":"https://wyxwx.github.io/2018/11/06/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
{"meta":{"title":"Wency","subtitle":null,"description":null,"author":"Wyx_wx","url":"https://wyxwx.github.io"},"pages":[{"title":"404","date":"2018-11-06T14:28:28.000Z","updated":"2018-11-07T14:31:59.690Z","comments":true,"path":"404/index.html","permalink":"https://wyxwx.github.io/404/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-07T13:44:14.000Z","updated":"2018-11-07T15:02:15.540Z","comments":true,"path":"categories/index.html","permalink":"https://wyxwx.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-11-06T15:18:06.000Z","updated":"2018-11-07T15:02:15.669Z","comments":true,"path":"about/index.html","permalink":"https://wyxwx.github.io/about/index.html","excerpt":"","text":"这里大三在校死宅一只 目前专攻于 Java 后台 对于算法略有涉猎 了解详情请致邮 791989352@qq.com"},{"title":"search","date":"2018-11-06T14:27:59.000Z","updated":"2018-11-07T14:31:37.535Z","comments":true,"path":"search/index.html","permalink":"https://wyxwx.github.io/search/index.html","excerpt":"","text":""},{"title":"search","date":"2018-11-06T14:27:59.000Z","updated":"2018-11-06T15:06:41.490Z","comments":true,"path":"tag/index.html","permalink":"https://wyxwx.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"IDEA 创建 Maven + Spring Boot 项目并打包（jar 包）上传至 Linux 服务器上运行","slug":"IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行","date":"2018-11-07T16:58:32.000Z","updated":"2018-11-07T17:30:20.942Z","comments":true,"path":"2018/11/08/IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行/","link":"","permalink":"https://wyxwx.github.io/2018/11/08/IDEA-创建-Maven-Spring-Boot-项目并打包（jar-包）上传至-Linux-服务器上运行/","excerpt":"","text":"首先打开 IDEA 并点击 New Project，进入如下页面，点击 Maven，选中”Create from archetype” big选择 quickstart 然后 next GroupId 为 package 名，ArtifactId 为项目名称，点击 next 不用改动，直接 next（有教程说要添加一个什么东西来防止下载速度过慢，笔者用了另一种办法，后面描述，所以这里不需要改动） 这个页面也不用改动，直接 finish 进入项目后，先去修改 pom.xml 文件，首先添加图中圈出的三处（version 请视自己具体所用版本而定） 接着在 dependencies 标签内添加以下配置 12345678910111213141516171819202122232425262728293031323334&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt; 然后将 build 标签改为下图所示 此时右下角可能会出现下图所示的小窗口，并且一直停滞，这就是上面所提到的问题，此时，下载 archetype-catalog.xml 文件，并将其放在 C 盘 .m2 文件的根目录下 关闭项目后再次打开发现下载速度明显提升并且很快结束下载 然后在 main 目录下创建文件夹 resources 并且设置为 Resources Root 在 Resources 目录下创建 application.properties 文件并填写有关数据库的配置（这里配置端口是因为笔者的服务器中8080端口已被占用，所以使用了另外的端口） 123456spring.datasource.url=jdbc:mysql://localhost:3306/basketball?serverTimezone=GMT&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsespring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.username=rootspring.datasource.password=root`# 设置 tomcat 端口为 8880server.port=8880 此时，正式开始代码部分 在 com.hello 包下创建 controller 包， 并在其下创建 HelloController 类 在其中编写代码 1234567891011121314package com.hello.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.Map;@RestControllerpublic class HelloController &#123; @GetMapping(value = \"/hello\") public Map&lt;String, Object&gt; hello()&#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"hello\", \"Hello world!\"); return map; &#125;&#125; 打开 App.java 为 App 添加注解 @SpringBootApplication，并在 Main 函数中运行 SpringApplication.run(App.class, args); 1234567891011package com.hello;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class App&#123; public static void main( String[] args ) &#123; SpringApplication.run(App.class, args); &#125;&#125; 此时，代码部分已经结束，开始进行下一步，按图中箭头所示进行操作 Name 可以自己取，Main class 选取添加了 @SpringBootApplication 注解的 App 类，直接 ok 运行后用 Postman（Get 方法也可以在浏览器地址栏直接访问） 访问 url，成功返回 接下来，将项目打包为 jar 包并上传至服务器 在 View 中的 Tool Windows 找到Maven Projects 并打开 先双击 clean （如果是第一次则不需要） 然后双击 install 此时，打包成功 在 target 目录下可以看到生成的 .jar 文件 然后利用 FileZilla 将 jar 包上传至服务器文件 利用 PuTTY 登录云服务器，进入到所上传 jar 包的目录下 运行 jar 包有两种方式 1234# 直接运行，当该窗口关闭时程序终止java -jar xxxx.jar# 持久运行，即便窗口关闭程序也不会终止nohup java -jar xxxx.jar &amp; 这里运用第二种方法 此时 hello.jar 已在运行，并且将日志存放在 nohup.out 文件中 12# 查看日志， Ctrl + C 退出查看tail -100f nohup.out 此时再次通过 Postman 访问路径，可以成功得到返回结果 若想关闭 jar 包的运行，首先要查看当前 jar 包的进程号，然后利用 kill 命令杀死进程 1234# 查看 xxxx.jar 运行的进程号ps -ef|grep xxxx.jar# 关闭进程号为 xx 的进程 kill xx","categories":[{"name":"JavaEE 学习之路","slug":"JavaEE-学习之路","permalink":"https://wyxwx.github.io/categories/JavaEE-学习之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"},{"name":"Maven","slug":"Maven","permalink":"https://wyxwx.github.io/tags/Maven/"},{"name":"Linux 云服务器","slug":"Linux-云服务器","permalink":"https://wyxwx.github.io/tags/Linux-云服务器/"}]},{"title":"Spring Boot 项目在本地可以成功访问但是在服务器上无法访问 Controller 方法解决办法","slug":"Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法","date":"2018-11-07T16:24:51.000Z","updated":"2018-11-07T16:55:14.632Z","comments":true,"path":"2018/11/08/Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法/","link":"","permalink":"https://wyxwx.github.io/2018/11/08/Spring-Boot-项目在本地可以成功访问但是在服务器上无法访问-Controller-方法解决办法/","excerpt":"","text":"这是一篇记录自己失了智的博客 晚上写了一个小 Demo 来测试在云服务器上同时运行两个 jar 包的情况 两个项目的端口分别为 8080 和 8880 以 8880 为端口的 Demo 在本地成功运行并且访问到了 Controller 中的方法 在服务器运行后从日志中也可以确定成功完成了映射 但是就是没有办法通过服务器的 url 进行访问 百度了 N 久都没有找到和我相同的问题，直到被大佬指点之后才意识到，我的服务器的安全组中没有添加 8880 这个端口，换言之，请求被防火墙拦截了。去将 8880 添加到安全组后，再次访问，成功返回 “Hello world!”","categories":[{"name":"踩坑之路","slug":"踩坑之路","permalink":"https://wyxwx.github.io/categories/踩坑之路/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wyxwx.github.io/tags/SpringBoot/"},{"name":"无法访问 Controller","slug":"无法访问-Controller","permalink":"https://wyxwx.github.io/tags/无法访问-Controller/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-06T13:38:41.928Z","updated":"2018-11-06T13:38:41.928Z","comments":true,"path":"2018/11/06/hello-world/","link":"","permalink":"https://wyxwx.github.io/2018/11/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}